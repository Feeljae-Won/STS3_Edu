<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.zerock.air.mapper.AirMapper">

	<!-- id 는 메소드 이름과 같아야 한다. -->
	<select id="searchList" resultType="org.zerock.air.vo.AirVO">
	    select 
	        a.countryCode, a.airportCode, a.airportEng, a.airportKor, c.countryKor, c.countryEng, c.pan
	    from
	        airport a, country c
	    where
	        a.countryCode = c.countryCode
	        and
	        (
	            a.airportCode like '%' || #{searchAirport} || '%'
	            or a.airportKor like '%' || #{searchAirport} || '%'
	            or a.airportEng like '%' || #{searchAirport} || '%'
	            or c.countryKor like '%' || #{searchAirport} || '%'
	            or c.countryEng like '%' || #{searchAirport} || '%'
	        )
	</select>
	
	<!-- 항공권 검색 결과 -->
	<select id="searchResult" resultType="org.zerock.air.vo.AirVO">
		SELECT 
		    m.photo, 
		    al.airlineKor, 
		    ar.departure, 
		    dep_airport.airportKor AS departureKor, 
		    ar.arrival, 
		    arr_airport.airportKor AS arrivalKor, 
		    aopt.flightName,
		    <!-- 일 처리 -->
		    CASE 
		        WHEN EXTRACT(DAY FROM ash.duration) != 0 
		        THEN EXTRACT(DAY FROM ash.duration) || '일 ' 
		        ELSE '' 
		    END || 
		    <!-- 시간 처리 -->
		    CASE 
		        WHEN EXTRACT(HOUR FROM ash.duration) != 0 
		        THEN EXTRACT(HOUR FROM ash.duration) || '시간 ' 
		        ELSE '' 
		    END || 
		    <!-- 분 처리 -->
		    CASE 
		        WHEN EXTRACT(MINUTE FROM ash.duration) != 0 
		        THEN EXTRACT(MINUTE FROM ash.duration) || '분 ' 
		        ELSE '' 
		    END AS duration,
		    ash.ScheduleId, 
		    ash.status, 
		    TO_CHAR(ash.departureTime, 'hh24:mi') AS departureTime, 
		    TO_CHAR(ash.arrivalTime, 'hh24:mi') AS arrivalTime, 
		    (SELECT SUM(basePrice + tax + fuelSurCharge + bookingFee) 
		     FROM airPrice 
		     WHERE routeId = 1) AS totalPrice 
		FROM member m
		    JOIN airline al ON m.id = al.id
		    JOIN airplaneOpt aopt ON al.airlineNo = aopt.airLineNo
		    JOIN airSchedule ash ON (aopt.flightName = ash.flightName AND al.airlineNo = ash.airlineNo)
		    JOIN airRoute ar ON ar.routeId = ash.routeID
		    JOIN airport dep_airport ON dep_airport.airportCode = ar.departure
		    JOIN airport arr_airport ON arr_airport.airportCode = ar.arrival
		WHERE 
			(
		    ar.departure = #{departure} 
		    AND ar.arrival = #{arrival}
		    AND TRUNC(ash.departureTime) = #{departureTime}
		    )
		order by departureTime asc
	</select>
	
	<!-- 대륙별 국가 리스트 -->
	<select id="nocList" resultType="org.zerock.air.vo.AirVO">
		select 
			countryCode, CountryEng, CountryKor, Pan 
		from 
			country 
		where
			pan = #{pan}
	</select>
	
	<!-- 카테고리 대분류 등록 -->
	<insert id="nocWrite">
	    INSERT INTO country(countryCode, countryKor, countryEng, pan)
	    VALUES(
	    	#{countryCode}, #{countryKor}, #{countryEng}, #{pan}
	    )
 	</insert>

	<!-- 카테고리 수정 -->
	<update id="update">
	<![CDATA[
		update country
		set countryKor = #{countryKor}, countryEng = #{countryEng}, pan = #{pan}
		where countryCode = #{countryCode}
	]]>
	</update>

	<!-- 카테고리 삭제 -->
	<delete id="delete">
		delete from category
		where cate_code1 = ${cate_code1}
		<if test="cate_code2 != 0">
			and cate_code2 = #{cate_code2}
		</if>
	</delete>
	
	<!-- 국가별 공항 리스트 가져오기 -->
	<select id="getAirport" resultType="org.zerock.air.vo.AirVO">
		select a.countryCode, c.countryKor, c.countryEng, a.AirportCode, a.airportKor, a.airportEng
		from country c, airport a
		where a.countryCode = #{countryCode}
		    and a.countryCode = c.countryCode
    </select>
    
    <!-- 국가별 공항 리스트 가져오기 -->
	<select id="getAirplane" resultType="org.zerock.air.vo.AirVO">
		select airplaneId, airplanePdt, seatCapacity, seatX, seatY
		from airplane
		where airplanePdt = #{airplanePdt}
    </select>
    
    <!-- 항공사 기종 리스트 -->
    <select id="flightList" resultType="org.zerock.air.vo.AirVO">
    	select rnum, flightName, airplaneId, airplanepdt, seatCapacity, ecoCnt, precoCnt,
		        bisCnt, fstCnt, scheduleid, routeId, departure, arrival, airlineno
		from (
		    select rownum rnum, flightName, airplaneId, airplanepdt, seatCapacity, ecoCnt, precoCnt,
		        bisCnt, fstCnt, scheduleid, routeId, departure, arrival, airlineno
		    from (
		        select  aopt.flightName, aopt.airplaneId, ap.airplanepdt, ap.seatCapacity, aopt.ecoCnt, aopt.precoCnt, 
		            aopt.bisCnt, aopt.fstCnt, asch.scheduleid, asch.routeId, ar.departure, ar.arrival, aopt.airlineno
		        from airplaneOpt aopt, airplane ap, airschedule asch, airroute ar
		        where aopt.airlineno = #{airlineNo}
		            and aopt.airlineno = asch.airlineno
		            and aopt.airplaneId = ap.airplaneId
		            and asch.flightName = aopt.flightName
		            and asch.routeId = ar.routeId
		        order by flightName desc
		    )
		)
		where rnum between #{pageObject.startRow} and #{pageObject.endRow}
    </select>
    
    <!-- 전체 데이터 가져오기 -->
    <select id="getTotalRow" resultType="Long">
		select count(*) from airplaneOpt where airlineno = #{airlineNo}
	</select>
	
	<!-- 항공편 상세보기 -->
	<select id="getFlightInfo" resultType="org.zerock.air.vo.AirVO">
	select
	    <!-- 항공사 정보 --> 
	    m.photo, asch.airlineNo, al.airlineKor, al.airlineEng, al.countryCode, c.countryKor, c.countryEng, asch.flightName, aopt.airplaneId, ap.airplanePdt, 
	    <!-- 항공편 정보 -->
	    ap.seatcapacity, aopt.ecoCnt, aopt.prEcoCnt, aopt.bisCnt, aopt.fstCnt, ap.seatX, ap.seatY,
	    <!-- 경로 정보 -->
	    asch.routeId, route.departure, dport.airportKor departureKor, route.arrival, aport.airportKor arrivalKor, route.type, route.distance, 
	    <!-- 운항 정보 -->
	    asch.scheduleId, 
		TO_CHAR(asch.departureTime, 'hh24:mi') AS departureTime, 
	    TO_CHAR(asch.arrivalTime, 'hh24:mi') AS arrivalTime, 
	    <!-- 일 처리 -->
	    CASE 
	        WHEN EXTRACT(DAY FROM asch.duration) != 0 
	        THEN EXTRACT(DAY FROM asch.duration) || '일 ' 
	        ELSE '' 
	    END || 
	    <!-- 시간 처리 -->
	    CASE 
	        WHEN EXTRACT(HOUR FROM asch.duration) != 0 
	        THEN EXTRACT(HOUR FROM asch.duration) || '시간 ' 
	        ELSE '' 
	    END || 
	    <!-- 분 처리 -->
	    CASE 
	        WHEN EXTRACT(MINUTE FROM asch.duration) != 0 
	        THEN EXTRACT(MINUTE FROM asch.duration) || '분 ' 
	        ELSE '' 
	    END AS duration,  asch.status
	from 
	    member m, airline al, airplane ap, airplaneOpt aopt, airport dport, airport aport, airroute route, airschedule asch, country c
	where (
	    asch.airlineNo = al.airlineNo
	    and al.Id = m.id
	    and al.countryCode = c.countryCode
	    and asch.flightName = aopt.flightName
	    and aopt.airPlaneId = ap.airplaneId
	    and asch.routeId = route.routeID
	    and route.departure = dport.airportCode
	    and route.arrival = aport.airportCode
	    )
	    and
	        asch.flightName = #{flightName}
	</select>
	
	<!-- 전체 데이터 가져오기 -->
    <select id="getRouteTotalRow" resultType="Long">
		select count(*) from airRoute where airlineno = #{airlineNo}
	</select>
	
	<!-- 항공 노선 리스트-->
	<select id="routeList" resultType="org.zerock.air.vo.AirVO">
		 select rnum, routeId, departureCountry, departure, departureKor, departureEng,
	          arrivalCountry, arrival, arrivalKor, arrivalEng, type, distance 
	    from
	        ( 
	        select rownum rnum, routeId, departureCountry, departure, departureKor, departureEng,
	                arrivalCountry, arrival, arrivalKor, arrivalEng, type, distance 
	        from
	            (
	            select r.routeId, dc.countryKor departureCountry, r.departure, dap.airportKor departureKor, dap.airportEng departureEng, 
	                ac.countryKor arrivalCountry, r.arrival, aap.airportKor arrivalKor, r.type, r.distance, aap.airportEng arrivalEng
	            from
	                airRoute r, airport dap, airport aap, country dc, country ac
	            where
	            	r.airlineNo = #{airlineNo}
	            	<if test="routeId != 0">
	            		and r.routeId = #{routeId}
	            	</if>
	            	and 
		            	(
			                r.departure = dap.airportCode
			                and r.arrival = aap.airportCode
			                and dap.countryCode = dc.countryCode
			                and aap.countryCode = ac.countryCode
		                )
	            order by routeId asc
	            )
	        )
	    where 
	    	rnum between #{pageObject.startRow} and #{pageObject.endRow}
	
	</select>
	
	<!-- 항공 노선에 따른 금액 상세보기 -->
	<select id="getPrice" resultType="org.zerock.air.vo.AirVO">
		select 
			priceId, routeID, basePrice, tax, fuelSurCharge, BookingFee
		from 
			airPrice
		where 
			airlineNo = #{airlineNo} and routeID = #{routeId}
	
	</select>
	
	<select id="airScheduleDetail" resultType="org.zerock.air.vo.AirVO">
		select
			rnum, scheduleId, flightName, departure, arrival, departureTime, arrivalTime, duration, status
		from (
			select 
				rownum rnum, scheduleId, flightName, departure, arrival, departureTime, arrivalTime, duration, status
			from (
				select 
					asch.scheduleId, asch.flightName, 
				    r.departure, r.arrival,
				    to_char(asch.departureTime, 'yyyy-mm-dd hh24:mi') departureTime,
				    to_char(asch.arrivalTime, 'yyyy-mm-dd hh24:mi') arrivalTime, 
				        <!-- 일 처리 -->
					    CASE 
					        WHEN EXTRACT(DAY FROM asch.duration) != 0 
					        THEN EXTRACT(DAY FROM asch.duration) || '일 ' 
					        ELSE '' 
					    END || 
				        <!-- 시간 처리 -->
					    CASE 
					        WHEN EXTRACT(HOUR FROM asch.duration) != 0 
					        THEN EXTRACT(HOUR FROM asch.duration) || '시간 ' 
					        ELSE '' 
					    END || 
					    <!-- 분 처리 --> 
					    CASE 
					        WHEN EXTRACT(MINUTE FROM asch.duration) != 0 
					        THEN EXTRACT(MINUTE FROM asch.duration) || '분 ' 
					        ELSE '' 
					    END AS duration, asch.status
				from 
					airschedule asch, airroute r
				where (
						asch.routeId = #{routeId} and asch.airlineNo = #{airlineNo}
					)
				    and asch.routeId = r.routeId
				order by asch.routeId asc
			)
		)
		where
			rnum between #{pageObject.startRow} and #{pageObject.endRow}
	</select>
		
	
</mapper>